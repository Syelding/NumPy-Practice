# -*- coding: utf-8 -*-
"""Numpy Practice

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nFM4sdFqpYe67xy4QnU5eOGYqI1B29ll

#**Hands on Practice Utilizing Numpy**

What is NumPy? NumPy is a numerical computing library in Python. Data Scientist and Analyst rely on its useful performance of mathematical operations on Arrays
"""

import sys
import numpy as np

"""## Basic Numpy Arrays 
What is an array? An array is a central data structure of the NumPy library. An array is a grid of values and it contains information about the raw data, how to locate an element, and how to interpret an element. It has a grid of elements that can be indexed in various ways. The elements are all of the same type, referred to as the array dtype.
"""

np.array([1,2,3,4])

a = np.array([1,2,3,4])

b = np.array([0,-5,1, 1.5, 2])

a[0], a[1]

a [0:]

a [1:3]

a [1:-1]

a [:: 2]

b

b[0], b[1], b[2]

b[[0,2,-1]]

"""# Array Types
Arrays behave like lists except for the fact that the objects they contain are constrained by their types and most importantly, they are faster and use lesser memory space.
"""

a

a.dtype

b

b.dtype #float

np.array([1, 2, 3, 4], dtype=np.float)

np.array([1, 2, 3, 4], dtype=np.int8)

c = np.array(['a', 'b', 'c'])

c.dtype

d = np.array([{'a': 1}, sys])

d.dtype

"""#Dimensions and Shapes
Dimension in arrays is one level of array depth (nested arrays).
The shape of the array is a tuple of integers giving the size of the array along each dimension.
"""

A = np.array([
    [1, 2, 3], #O index
    [4, 5, 6]  #1 index
])

A.shape #2= number of rows, #3= number of columns

A.ndim #amount thats horizontal and vertical

A.size #number of elements

B = np.array([
    [
        [12, 11, 10],
        [9, 8, 7],
    ],
    [
        [6, 5, 4],
        [3, 2, 1]
    ]
])

B

B.shape

B.ndim

B.size

C = np.array([   #inconsitent shape
    [
        [12, 11, 10],
        [9, 8, 7],
    ],
    [
        [6, 5, 4]
    ]
])

C.dtype

C.shape

C.size

type(C[0])

"""#Indexing and Slicing of Matrices
Indexing is used to obtain individual elements.Slicing is used to obtain a sequence of elements.Indexing and Slicing can be be done in Python Sequences types like list, string, tuple, range objects.
"""

# Square matrix
A = np.array([
#.   0. 1. 2 
    [1, 2, 3], # 0
    [4, 5, 6], # 1
    [7, 8, 9]  # 2
])

A[1] #refers to the row of the matrix

A[1][0] #the first element in the second row

# A[d1, d2, d3, d4]

A[1, 0] #index

A[0:2] #slice

A[:, :2]

A[:2, :2]

A[:2, 2:]

A

A[1] = np.array([10, 10, 10])

A

A[2] = 99

A

"""#Summary statistics
NumPy contains various statistical functions that are used to perform statistical data analysis. These statistical functions are useful when finding a maximum or minimum of elements. It is also used to find basic statistical concepts like standard deviation, variance, etc.
"""

a = np.array([1, 2, 3, 4])

a.sum()

a.mean()

a.std()

a.var()

A = np.array([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
])

A.sum()

A.mean()

A.std()

A.sum(axis=0) #sum of horizontal

A.sum(axis=1) #sum of vertical

A.mean(axis=0)

A.mean(axis=1)

A.std(axis=0)

A.std(axis=1)

"""#Broadcasting and Vectorized operations
Vectorization and Broadcasting are ways to speed up the compute time and optimize memory usage while doing mathematical operations with Numpy.  Vectorized operation can replace traditional for loops, run faster, work on different matrix dimension size. Hence,  just array expression replacing explicit for-loop.
Broadcasting refers to how numpy treats arrays with different Dimension during arithmetic operations which lead to certain constraints, the smaller array is broadcast across the larger array so that they have compatible shapes. 


"""

a = np.arange(4)

a

a + 10

a * 10

a

a += 100

a

l = [0, 1, 2, 3]

[i * 10 for i in l]

a = np.arange(4)

a

b = np.array([10, 10, 10, 10])

b

a * b

"""#Boolean arrays
A boolean array is a numpy array with boolean (True/False) values. Such array can be obtained by applying a logical operator to another numpy array:
"""

a = np.arange(4)

a

a[0], a[-1]

a[[0, -1]]

a[[True, False, False, True]]

a

a[a >= 2]

a.mean()

a[a > a.mean()]

a[~(a > a.mean())]

a[(a == 0) | (a == 1)]

a[(a <= 2) & (a % 2 == 0)]

A = np.random.randint(100, size=(3, 3))

A[np.array([
    [True, False, True],
    [False, True, False],
    [True, False, True]
])]

A > 30

A[A > 30]

"""#Linear Algebra
Thus, we tend to collect as much data as possible in order to build a robust and accurate model. As the amount of data increases, the operations done with scalars start to be inefficient. We need vectorized or matrix operations to make computations efficiently.Hence, numpy has all the most important operations already optimized with low level semantics
"""

A = np.array([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
])

B = np.array([
    [6, 5],
    [4, 3],
    [2, 1]
])

A.dot(B)

A @ B

B.T

A

B.T @ A

"""#Size of objects in Memory
(Integers and Floats)
"""

# An integer in Python is > 24bytes
sys.getsizeof(1)

# Longs are even larger
sys.getsizeof(10**100)

# Numpy size is much smaller
np.dtype(int).itemsize

# Numpy size is much smaller
np.dtype(np.int8).itemsize

np.dtype(float).itemsize

"""#Lists """

# A one-element list
sys.getsizeof([1])

# An array of one element in numpy
np.array([1]).nbytes

"""#Performance
How does python process list versus arrays.
"""

l = list(range(100000))

a = np.arange(100000)

# Commented out IPython magic to ensure Python compatibility.
# %time np.sum(a ** 2)

# Commented out IPython magic to ensure Python compatibility.
# %time sum([x ** 2 for x in l])

"""#Useful Numpy functions

**Random**
Is an in-built module of Python which is used to generate random numbers.
"""

np.random.random(size=2)

np.random.normal(size=2)

np.random.rand(2, 4)

""" Arange
Is used to get evenly spaced values within a given interval.
"""

np.arange(10)

np.arange(5, 10)

np.arange(0, 1, .1)

"""Reshape
Gives a new shape to an array without changing its data.
"""

np.arange(10).reshape(2, 5)

np.arange(10).reshape(5, 2)

"""
 Linspace
 Is a tool in Python for creating numeric sequences."""

np.linspace(0, 1, 5)

np.linspace(0, 1, 20)

np.linspace(0, 1, 20, False)

"""Zeros, ones, empty

Zero his is used to return a new array of the specified size and each array item will be initialized with 0.
Ones used to return a new array of the specified size and each array item will be initialized as 1.
Empty s used to create an uninitialized array of specified shape and dtype.
"""

np.zeros((3, 3))

np.zeros((3, 3), dtype=np.int)

np.ones(5)

np.ones((3, 3))

np.empty(5)

np.empty((2, 2))

"""Identity and eye

Identity array is a square array with ones on the main diagonal.
The eye tool returns a 2-D array with  1’s as the diagonal and  0’s elsewhere
"""

np.identity(3)

np.eye(3, 3)

np.eye(8, 4)

np.eye(8, 4, k=1)

np.eye(8, 4, k=-3)