# -*- coding: utf-8 -*-
"""Pandas Dataframe

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1boY3QCuekom-YZWdoOgYPDI2b4GUMzHg

#Pandas (Data Frames)
Pandas DataFrame is a 2-dimensional labeled data structure like any table with rows and columns. The size and values of the dataframe are mutable,i.e., can be modified. It is the most commonly used pandas object. Pandas DataFrame can be created in multiple ways
"""

import numpy as np
import pandas as pd

#Whats in the '' is the Column name and what is located in the brackets is the components of the column
df = pd.DataFrame({
    'Population': [35.467, 63.951, 80.94 , 60.665, 127.061, 64.511, 318.523],
    'GDP': [
        1785387,
        2833687,
        3874437,
        2167744,
        4602367,
        2950039,
        17348075
    ],
    'Surface Area': [
        9984670,
        640679,
        357114,
        301336,
        377930,
        242495,
        9525067
    ],
    'HDI': [
        0.913,
        0.888,
        0.916,
        0.873,
        0.891,
        0.907,
        0.915
    ],
    'Continent': [
        'America',
        'Europe',
        'Europe',
        'Europe',
        'Asia',
        'Europe',
        'America'
    ]
}, columns=['Population', 'GDP', 'Surface Area', 'HDI', 'Continent'])

#What the dataframe looks like
df

#In pandas, your dataframe also has indexes. The above code below shows a numeric autoincremental index provided to each row. In the code below I am reassigning the indec to indicate country names
df.index = [
    'Canada',
    'France',
    'Germany',
    'Italy',
    'Japan',
    'United Kingdom',
    'United States',
]

df.columns

df.index

#The info() method prints information about the DataFrame.The information contains the number of columns, column labels, column data types, memory usage, range index, and the number of cells in each column (non-null values).
df.info()

#The number of elements in your dataframe
df.size

#the number of rows and cloumns
df.shape

df.describe()

#Types of data that you will see in a dataframe float64 the 64 refers to bitsize and a float is a number with a decimal point and an integer (int) is a number without a deciaml point
df.dtypes

df.dtypes.value_counts()

"""Indexing, Selection and Slicing
Individual columns in the DataFrame can be selected with regular indexing. Each column is represented as a Series:
1. .loc is primarily label based meaning that it selects rows (or columns) with 
explicit label from the index. Therefore, a KeyError will be raised if the items are not found.
2. .iloc is primarily integer position based (from 0 to length-1 of the axis) meaning that rows (or columns) are selected by its position in the index — it takes only integers. If the indexer is out-of-bounds then an IndexError will be raised.
"""

df

df.loc['Canada']

df.iloc[-1]

df['Population']

df[['Population', 'GDP']]

df[1:3]

df.loc['Italy']

df.loc['France': 'Italy']

df.loc['France': 'Italy', 'Population']

df.loc['France': 'Italy', ['Population', 'GDP']]

df

df.iloc[0]

df.iloc[-1]

df.iloc[[0, 1, -1]]

df.iloc[1:3]

df.iloc[1:3, 3]

df.iloc[1:3, [0, 3]]

df.iloc[1:3, 1:3]

"""Conditional selection (boolean arrays)"""

df

df['Population'] > 70

df.loc[df['Population'] > 70]

df.loc[df['Population'] > 70, 'Population']

df.loc[df['Population'] > 70, ['Population', 'GDP']]

"""Dropping stuff
Opposed to the concept of selection, we have "dropping". Instead of pointing out which values you'd like to select you could point which ones you'd like to drop:
"""

df.drop('Canada')

df.drop(['Canada', 'Japan'])

df.drop(columns=['Population', 'HDI'])

df.drop(['Italy', 'Canada'], axis=0)

df.drop(['Population', 'HDI'], axis=1)

df.drop(['Population', 'HDI'], axis=1)

df.drop(['Population', 'HDI'], axis='columns')

df.drop(['Canada', 'Germany'], axis='rows')

"""Operations"""

df[['Population', 'GDP']]

df[['Population', 'GDP']] / 100

crisis = pd.Series([-1_000_000, -0.3], index=['GDP', 'HDI'])
crisis

df[['GDP', 'HDI']]

df[['GDP', 'HDI']] + crisis

"""Modifying DataFrames
It's simple and intuitive, You can add columns, or replace values for columns without issues
"""

langs = pd.Series(
    ['French', 'German', 'Italian'],
    index=['France', 'Germany', 'Italy'],
    name='Language'
)

langs

df['Language'] = langs

df['Language'] = langs

"""Replacing values per column"""

df['Language'] = 'English'

df

"""Renaming Columns"""

df.rename(
    columns={
        'HDI': 'Human Development Index',
        'Anual Popcorn Consumption': 'APC'
    }, index={
        'United States': 'USA',
        'United Kingdom': 'UK',
        'Argentina': 'AR'
    })

df.rename(index=str.upper)

df.rename(index=lambda x: x.lower())

"""
 Dropping columns
 You can drop column in pandas dataframe using the df.drop(“column_name”, axis=1, inplace=True) statement."""

df.drop(columns='Language', inplace=True)

df.append(pd.Series({
    'Population': 3,
    'GDP': 5
}, name='China'))

df

df.loc['China'] = pd.Series({'Population': 1_400_000_000, 'Continent': 'Asia'})

df

df.drop('China', inplace=True)

df

"""
 More radical index changes"""

df.reset_index()

df.set_index('Population')

"""Creating columns from other columns"""

df[['Population', 'GDP']]

df['GDP'] / df['Population']

df['GDP Per Capita'] = df['GDP'] / df['Population']

df

"""Statistical info"""

df.head()

df.describe()

population = df['Population']

population.min(), population.max()

population.sum()

population.sum() / len(population)

population.mean()

population.std()

population.median()

population.describe()

population.quantile(.25)

population.quantile([.2, .4, .6, .8, 1])